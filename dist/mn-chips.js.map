{"version":3,"sources":["scripts/mn-chips.class.js"],"names":["MnChips","self","_this","_ret","_classCallCheck","this","classList","add","input","querySelector","name","getAttribute","setAddEvents","setValue","_possibleConstructorReturn","value","placeholder","valueAlreadyUsed","indexOf","option","chips","insertAdjacentHTML","lastOption","setTimeout","checked","dispatchChangeEvent","_this2","document","createElement","appendChild","Array","from","querySelectorAll","forEach","removeChild","addChip","textContent","_this3","addEventListener","remove","event","key","preventDefault","Event","dispatchEvent","values","_this4","isArray","innerHTML","options","window","MnInput","customElements","define"],"mappings":"sxCAAMA,QAAAA,SAAAA,iBACJ,QAAAA,SAAYC,MAAM,GAAAC,OAAAC,IAShB,OATgBC,iBAAAC,KAAAL,SAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,QAAAA,WAAAA,OAAAA,eAAAA,UAAAA,KAAAA,KAAaA,OACbC,MAAKI,UAAUC,IAAI,YACnBL,MAAKM,MAAQN,MAAKO,cAAc,SAChCP,MAAKQ,KAAOR,MAAKS,aAAa,QAC9BT,MAAKU,eAELV,MAAKW,WAELV,KAAOF,KAAPa,2BAAAZ,MAAAC,oGAGMY,MAAOC,aACb,GAAMC,kBAAmBZ,KAAKU,MAAMG,QAAQH,QAAU,CACtD,IAAIA,QAAUE,iBAAkB,CAC9BD,YAAcA,YAAAA,eACKA,YACf,EAEJ,IAAMG,QAAAA,uDAEKJ,MAFL,oBAGIV,KAAKK,KAHT,cAIFM,YAJE,WAMNX,MAAKe,MAAMC,mBAAmB,YAAaF,OAC3C,IAAMG,YAAajB,KAAKe,MAAMX,cAAc,uBAC5Cc,YAAW,WACTD,WAAWE,SAAU,GACpB,GACHnB,KAAKG,MAAMO,MAAQ,GACnBV,KAAKoB,0DAIE,GAAAC,QAAArB,IACTA,MAAKe,MAAQO,SAASC,cAAc,OACpCvB,KAAKe,MAAMd,UAAUC,IAAI,UACzBF,KAAKwB,YAAYxB,KAAKe,OAENU,MAAMC,KAAK1B,KAAK2B,iBAAiB,WACzCC,QAAQ,SAAAd,QACdO,OAAKQ,YAAYf,QACjBO,OAAKS,QAAQhB,OAAOJ,MAAOI,OAAOiB,eAGpC/B,KAAKoB,6DAGQ,GAAAY,QAAAhC,IACbA,MAAKG,MAAM8B,iBAAiB,OAAQ,WAClCD,OAAKF,QAAQE,OAAK7B,MAAMO,OACxBsB,OAAK/B,UAAUiC,OAAO,aACtBF,OAAK7B,MAAMO,MAAQ,KAGrBV,KAAKG,MAAM8B,iBAAiB,UAAW,SAAAE,QAEnC,QACA,IACA,KAG2BtB,QAAQsB,MAAMC,MAAQ,IAGjDJ,OAAKF,QAAQE,OAAK7B,MAAMO,OACxByB,MAAME,kEAMV,GAAMF,OAAQ,GAAIG,OAAM,SACxBtC,MAAKuC,cAAcJ,mCAGXK,QAAQ,GAAAC,QAAAzC,KACVY,iBAAmBZ,KAAKU,MAAMG,QAAQ2B,SAAW,CAEnDA,UAAW5B,kBACb4B,OAASf,MAAMiB,QAAQF,QACnBA,QACCA,QAELxC,KAAKe,MAAM4B,UAAY,GACvBH,OAAOZ,QAAQ,SAAAlB,OAAA,MAAS+B,QAAKX,QAAQpB,UAErCV,KAAKG,MAAMO,MAAQ,mBAKrB,GAAMkC,SAAU5C,KAAKI,cAAc,YACnC,OAAOwC,SACHA,QAAQlC,sBAhGMmC,OAAOC,QAqG7BD,QAAOE,eAAeC,OAAO,WAAYrD","file":"mn-chips.js","sourcesContent":["class MnChips extends window.MnInput {\n  constructor(self) {\n    self = super(self)\n    this.classList.add('mn-chips')\n    this.input = this.querySelector('input')\n    this.name = this.getAttribute('name')\n    this.setAddEvents()\n\n    this.setValue()\n\n    return self\n  }\n\n  addChip(value, placeholder) {\n    const valueAlreadyUsed = this.value.indexOf(value) > -1\n    if (value && !valueAlreadyUsed) {\n      placeholder = placeholder\n        ? `placeholder=${placeholder}`\n        : ''\n\n      const option = `<mn-option\n        class=\"natural\"\n        value=\"${value}\"\n        name=\"${this.name}\"\n        ${placeholder}\n      >`\n      this.chips.insertAdjacentHTML('beforeend', option)\n      const lastOption = this.chips.querySelector('mn-option:last-child')\n      setTimeout(() => {\n        lastOption.checked = true\n      }, 0)\n      this.input.value = ''\n      this.dispatchChangeEvent()\n    }\n  }\n\n  setValue() {\n    this.chips = document.createElement('div')\n    this.chips.classList.add('values')\n    this.appendChild(this.chips)\n\n    const options = Array.from(this.querySelectorAll('option'))\n    options.forEach(option => {\n      this.removeChild(option)\n      this.addChip(option.value, option.textContent)\n    })\n\n    this.dispatchChangeEvent()\n  }\n\n  setAddEvents() {\n    this.input.addEventListener('blur', () => {\n      this.addChip(this.input.value)\n      this.classList.remove('has-value')\n      this.input.value = ''\n    })\n\n    this.input.addEventListener('keydown', event => {\n      const enterKeys = [\n        'Enter',\n        ',',\n        ' ',\n      ]\n\n      const isEnterKey = enterKeys.indexOf(event.key) > -1\n\n      if (isEnterKey) {\n        this.addChip(this.input.value)\n        event.preventDefault()\n      }\n    })\n  }\n\n  dispatchChangeEvent() {\n    const event = new Event('change')\n    this.dispatchEvent(event)\n  }\n\n  set value(values) {\n    const valueAlreadyUsed = this.value.indexOf(values) > -1\n\n    if (values && !valueAlreadyUsed) {\n      values = Array.isArray(values)\n        ? values\n        : [values]\n\n      this.chips.innerHTML = ''\n      values.forEach(value => this.addChip(value))\n    } else {\n      this.input.value = ''\n    }\n  }\n\n  get value() {\n    const options = this.querySelector('mn-option')\n    return options\n      ? options.value\n      : []\n  }\n}\n\nwindow.customElements.define('mn-chips', MnChips)\n"]}